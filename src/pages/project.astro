---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
import PageTitie from "../components/PageTitie.astro";
import Menu from "../components/Menu.astro";
import YellowSmallTitle from "../components/YellowSmallTitle.astro";
import BlackSmallTitle from "../components/BlackSmallTitle.astro";
import ProjectButton from "../components/ProjectButton.astro";
import SelectableOption from "../components/SelectableOption.astro";
const allGames = await Astro.glob("./project/*.md");
allGames.sort((game1, game2) =>
    game1.frontmatter.title.localeCompare(game2.frontmatter.title),
);
const allPortfolios = await Astro.glob("./project/*.md");
---

<Layout>
    <Menu />
    <PageTitie title="PROJECTS" subtitle="프로젝트" />

    <main>
        <div class="selectable-option-group">
            <SelectableOption active className="game">GAMES</SelectableOption>
            <!-- <SelectableOption className="portfolio">PORTFOLIOS</SelectableOption> -->
        </div>

        <div class="card-group game end-block">
            {
                allGames.map((project) => (
                    <ProjectButton
                        path={project.url}
                        fileName={project.frontmatter.fileName}
                        title={project.frontmatter.title}
                    />
                ))
            }
        </div>

        <!-- <div class="card-group portfolio d-none">
            {
                allPortfolios.map(
                    (project) =>
                        project.frontmatter.title != "게임 이름" && (
                            <ProjectButton
                                path={project.url}
                                fileName={project.frontmatter.fileName}
                                title={project.frontmatter.title}
                            />
                        ),
                )
            }
        </div> -->
    </main>
</Layout>

<script is:inline>
    var $ = document.querySelector.bind(document);
    var gameBtn = $(".selectable-option.game");
    var portfolioBtn = $(".selectable-option.portfolio");

    var gameGroup = $(".card-group.game");
    var portfolioGroup = $(".card-group.portfolio");

    gameBtn.addEventListener("click", (e) => {
        gameBtn.classList.add("active");
        portfolioBtn.classList.remove("active");

        gameGroup.classList.remove("d-none");
        portfolioGroup.classList.add("d-none");
    });

    portfolioBtn.addEventListener("click", (e) => {
        portfolioBtn.classList.add("active");
        gameBtn.classList.remove("active");

        portfolioGroup.classList.remove("d-none");
        gameGroup.classList.add("d-none");
    });
</script>

<style>
    main {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .selectable-option-group {
        display: flex;
        flex-direction: row;
        column-gap: 25px;
        margin-bottom: 6.25rem;
    }

    .card-group {
        display: flex;
        flex-wrap: wrap;
        column-gap: 25px; /* 자식 요소들 간의 가로 간격 설정 */
        justify-content: flex-start; /* 요소들을 왼쪽 정렬 */
    }

    @media (width <= 650px) {
        .selectable-option-group {
            column-gap: 15px;
        }
    }
</style>
